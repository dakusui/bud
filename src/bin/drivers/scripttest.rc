# If pre-check succeeds this function should exit with 0 printing a JSON object
# whose ".precheck" attribute is set to "true" or "false".
# If the test should be executed in the current run, the attribute should be
# "true" otherwise "false".
# In case unexpected error is detected, this function should exit with non-0
# exit code and non-JSON data may be printed.
function precheck_test() {
  local _testname="${1}"
  local _precheck=true
  if [[ "${_testname}" == ignore-* ]]; then
    _precheck=false
  fi
  jq -ncrM --argjson v "${_precheck}" '{"precheck":$v}'
}

function _execute_test() {
  local _testname="${1}"
  local _dir _exit_code
  _dir="$(bud__directory_for_output)"
  bash -eu -E "${_dir}/${_testname}" >"$(bud__file_for_stdout "${_dir}")" 2>"$(bud__file_for_stderr "${_dir}")"
  _exit_code="$?"
  echo "${_exit_code}" >"$(bud__file_for_exit_code "${_dir}")"
  cat "${_dir}/${_testname}" > "$(bud__file_for_script)"
  return 0
}

function execute_test() {
  local _testname="${1}"
  _execute_test "${_testname}" || {
    error "The test: '${_testname}' failed with an error."
  }

  local _expectation_json
  _expectation_json="$(__bud__compose_precheck_expectation_json)"
  __bud__verify_cmd_execution_result "${_expectation_json}"
}
