"${__BUD__JSON_RC:-false}" && return 0
readonly __BUD__JSON_RC=true

source "$(dirname "${BASH_SOURCE[0]}")/core.rc"

function to_json_array() {
  local _i
  for _i in "${@}"; do echo "${_i}"; done |
    jq -R -c --stream '.' |
    jq -s -crM '.'
}

function json_value_at() {
  local _path="${1}" _json="${2}"
  echo "${_json}" | jq -crM "${_path}" || abort "Something went wrong _path:'${_path}' _json='${_json}'"
}

function json_type_of() {
  local _path="${1}" _json="${2}"
  echo "${_json}" | jq -crM "${_path}|type" || abort "Something went wrong _path:'${_path}' _json='${_json}'"
}

function json_value_at_or_else() {
  local _path="${1}" _json="${2}" _default_value="${3}"
  local _is_null
  # If you check the value using the function 'json_value_at', you cannot tell
  # the value is string "null" or a JSON's null node.
  # Note that we are still unable to tell the absence of an attribute and
  # an actual null node. (This is a limitation of this function)
  _is_null="$(echo "${_json}" | jq -crM "${_path} == null")" ||
    abort "Something went wrong: _path:'${_path}' _json:'${_json}' _default_value:'${_default_value}'"
  if [[ "${_is_null}" == true ]]; then
    echo "${_default_value}"
  else
    json_value_at "${_path}" "${_json}"
  fi
}

function json_has() {
  local _key="${1}" _json="${2}"
  local _v
  _v="$(echo "${_json}" | jq -crM 'has("'"${_key}"'")')"
  exit_if_aborted "Failed to check key:'${_key}' in json:'${_json}'"
  if [[ "${_v}" == true ]]; then
    return 0
  fi
  return 1
}

function json_has_non_null_value_at() {
  local _path="${1}" _json="${2}"
  local _v
  _v="$(echo "${_json}" | jq -crM "getpath(path(${_path})) != null")" || abort "Something went wrong _path:'${_path}' _json='${_json}'"
  if [[ "${_v}" == true ]]; then
    return 0
  fi
  return 1
}

# If it is not present, nothing will be written.
function json_value_if_non_null_value_is_present_at() {
  local _path="${1}" _json="${2}"
  if json_has_non_null_value_at "${_path%[]}" "${_json}"; then
    json_value_at "${_path}" "${_json}"
  fi
}

function json_object_merge() {
  local _v="${1}" _w="${2}"
  jq -nrcM --argjson v "${_v}" --argjson w "${_w}" '$v * $w' ||
    abort "Failed to merge objects _v:'${_v}' _w:'${_w}'"
}

function json_array_append() {
  local _v="${1}" _w="${2}"
  jq -ncrM --argjson v "${_v}" --argjson w "${_w}" '$v + $w' ||
    abort "Failed to append arrays _v:'${_v}' _w:'${_w}'"
}
