function _test_package() {
  local _version="${1}"
  local _target_tests="${2}"
  local _ret
  # shellcheck disable=SC1090
  # source=jf_aliases
  source "$(pwd)/${APP_NAME}_aliases"
  export -f jq-front
  export JF_DOCKER_TAG="${_version}"
  message "Testing package:'${JF_DOCKER_TAG}'"
  bash -eu "tests/tests.sh" "${APP_NAME}" "$(pwd)/tests" "${_target_tests}"
  _ret=$?
  unset -f jq-front
  unset JF_DOCKER_TAG
  return "${_ret}"
}

function _build() {
  local _version="${1}"
  docker build --build-arg VERSION="${_version}" -t "${DOCKER_REPO_NAME}:${_version}" .
}

function execute_doc() {
  local i
  message "Preparing a directory for documents: '${DOCDIR}'"
  mkdir -p "${DOCDIR}/resources"
  cp -r "${DOCSRCDIR}/resources/"* "${DOCDIR}/resources/"
  [[ $? == 0 ]] || abort "Failed to copy 'resources' directory."
  message "...done"
  while IFS= read -r -d '' i; do
    local _src_file="/documents/adoc/${i##*/}"
    local _dest_file="${i%.adoc}"
    _dest_file="/documents/doc/${_dest_file##*/}.html"
    message "Processing '${_src_file}'"
    docker run --rm \
      --user "$(id -u):$(id -g)" \
      -v "${BASEDIR}":/documents/ \
      asciidoctor/docker-asciidoctor \
      asciidoctor --trace -r asciidoctor-diagram -a toc=left "${_src_file}" -o "${_dest_file}"
      #ls /documents/adoc
      # asciidoctor -r asciidoctor-diagram -a toc=left "${_src_file}" -o "${_dest_file}"
    [[ $? == 0 ]] || abort "Failed to process: '${_src_file}'"
    message "...done"
  done < <(find "${DOCSRCDIR}" -type f -name '*.adoc' -print0)
  message "Generating '${DOCDIR}/index.html'"
  buildtools/index.sh "${DOCSRCDIR}" >"${DOCDIR}/index.html"
  [[ $? == 0 ]] || abort "Failed to generate 'index.html'"
  message "...done"
}

function execute_package() {
  _build "${TARGET_VERSION}-snapshot"
}

function execute_test() {
  local _target_tests="${1:-*}"
  bash -eu "tests/tests.sh" "$(pwd)/${APP_NAME}" "$(pwd)/tests" "${_target_tests}"
  return $?
}

function execute_test_package() {
  local _target_tests="${1:-*}"
  _test_package "${TARGET_VERSION}-snapshot" "${_target_tests}"
  return $?
}

function execute_check_release() {
  local uncommitted_changes
  local unmerged_commits
  local release_branch="master"
  local current_branch
  # shellcheck disable=SC2063
  current_branch=$(git branch | grep '^*' | cut -d ' ' -f 2)
  if [[ ${current_branch} != "${release_branch}" ]]; then
    message "You are not on release branch:'${release_branch}': current branch:'${current_branch}'"
    return 1
  fi
  uncommitted_changes=$(git diff)
  if [[ ! -z ${uncommitted_changes} ]]; then
    message "You have uncommitted changes"
    echo "${uncommitted_changes}" | less
    return 1
  fi
  git pull origin "${release_branch}"
  unmerged_commits=$(git log origin/${release_branch}..HEAD)
  if [[ ! -z ${unmerged_commits} ]]; then
    message "You have following unmerged commits against branch:'${release_branch}'"
    message "${unmerged_commits}"
    return 1
  fi
}

function execute_package_release() {
  _build "${TARGET_VERSION}"
  _build "latest"
}

function execute_test_release() {
  local _target_tests="${1:-*}"
  _test_package "${TARGET_VERSION}" "${_target_tests}"
}

function execute_release() {
  docker login
  docker push "${DOCKER_REPO_NAME}:${TARGET_VERSION}"
  docker push "${DOCKER_REPO_NAME}:latest"
}

function execute_post_release() {
  local tmp
  git tag "${TARGET_VERSION}"
  git push origin "${TARGET_VERSION}"
  tmp=$(mktemp)
  jq '.|.version.latestReleased.minor=.version.target.minor|.version.target.minor=.version.target.minor+1' build_info.json >"${tmp}" || abort "Failed to bump up the version."
  cp "${tmp}" build_info.json
  message "Updated build_info.json"
  source build_info.rc
  message "Reloaded build_info.sh"
  message "Synchronize documentation"
  execute_prepare
  execute_doc
  message "Documenatation was synchronized"
  git commit -a -m "$(printf "Bump up target version to v%s.%s" \
    "$(jq '.version.target.major' "${tmp}")" \
    "$(jq '.version.target.minor' "${tmp}")")" || abort "Failed to commit bumped up version."
  message "Committed the change"
  git push origin master:master || abort "Failed to push the change."
  message "Pushed it to the remote"
}

function execute_deploy() {
  docker login
  docker push "${DOCKER_REPO_NAME}:${TARGET_VERSION}-snapshot"
}
